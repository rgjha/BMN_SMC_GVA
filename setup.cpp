#include "setup.h"

void setup(void){
int i,j,k;

// note: Tr(TaTb)=-delta_ab

cout << "Computing generators for SU(N)\n" << flush;
(void)my_gen();

// test orthogonality
/*Complex trace;
for(i=0;i<RANK;i++){
for(j=0;j<RANK;j++){
trace=Tr(Lambda[i]*Lambda[j]);
if(trace.norm()>0.000001){
cout << "TrT_"<< i << "T_" << j << "= " <<  trace << "\n" <<
flush;}
}}*/

if(RANK==NCOLOR*NCOLOR){
Lambda[RANK-1]=Umatrix();

for(i=0;i<NCOLOR;i++){
Lambda[RANK-1].set(i,i,(1.0/sqrt(NCOLOR))*Complex(0.0,1.0));
}
}

// structure constants and not-quite-structure constants!
/*for(i=0;i<RANK;i++)
for(j=0;j<RANK;j++)
for(k=0;k<RANK;k++){
f[i][j][k]=-Tr(Lambda[i]*(Lambda[j]*Lambda[k]-Lambda[k]*Lambda[j])).real();
if(fabs(f[i][j][k])>0.0000001){
cout << "f[" << i << "][" << j << "][" << k << "] is " << f[i][j][k] << "\n" <<
flush;}
}*/


// Q=15, err=5x10^-5 range 0.00000001--1000.0
/*SMALLCUT=0.00000001;
LARGECUT=1000.0;

ampdeg = 9.9997112279957390e-02;
amp[0] = 3.6832229992796258e-07; shift[0] = 3.7549480881878877e-09;
amp[1] = 1.3567666284582589e-06; shift[1] = 4.3373206800920752e-08;
amp[2] = 5.1757466437096689e-06; shift[2] = 2.8970668616661478e-07;
amp[3] = 2.0060578172377753e-05; shift[3] = 1.7970117665113235e-06;
amp[4] = 7.7976055655092961e-05; shift[4] = 1.1016220840281374e-05;
amp[5] = 3.0323983201324125e-04; shift[5] = 6.7403510935204510e-05;
amp[6] = 1.1793570136758038e-03; shift[6] = 4.1228407663619111e-04;
amp[7] = 4.5868079395172696e-03; shift[7] = 2.5216729791207432e-03;
amp[8] = 1.7839421514438226e-02; shift[8] = 1.5423383071080004e-02;
amp[9] = 6.9386638849859295e-02; shift[9] = 9.4337434071853923e-02;
amp[10] = 2.6997414529708952e-01; shift[10] = 5.7713151658913675e-01;
amp[11] = 1.0526731536884490e+00; shift[11] = 3.5350396633271388e+00;
amp[12] = 4.1584233028628317e+00; shift[12] = 2.1815101171813343e+01;
amp[13] = 1.7800823020581991e+01; shift[13] = 1.4102992696626504e+02;
amp[14] = 1.2795681699057995e+02; shift[14] = 1.2544425313051306e+03;
*/

SMALLCUT=0.000000000001;
LARGECUT=100.0;
//Approximation to f(x) = x^(-1/4) in range 10^-12---10^2 error 4x10^-4

ampdeg = 1.9859911225727594e-01;
amp[0] = 5.6525737383813638e-10; shift[0] = 6.2055039362681142e-13;
amp[1] = 2.8897161742922641e-09; shift[1] = 9.5228525356709977e-12;
amp[2] = 1.5523219807952895e-08; shift[2] = 9.4966547903103553e-11;
amp[3] = 8.4168479117282333e-08; shift[3] = 9.1015929138528829e-10;
amp[4] = 4.5683648057883711e-07; shift[4] = 8.6871565912659510e-09;
amp[5] = 2.4798122281040934e-06; shift[5] = 8.2880215425092045e-08;
amp[6] = 1.3461136234343895e-05; shift[6] = 7.9068680733557773e-07;
amp[7] = 7.3071021408040588e-05; shift[7] = 7.5432078079996133e-06;
amp[8] = 3.9665132089229601e-04; shift[8] = 7.1962718165434863e-05;
amp[9] = 2.1531519682284773e-03; shift[9] = 6.8653106325031513e-04;
amp[10] = 1.1688532255931368e-02; shift[10] = 6.5497387310589116e-03;
amp[11] = 6.3479205199790292e-02; shift[11] = 6.2502036556448926e-02;
amp[12] = 3.4616234131245882e-01; shift[12] = 5.9783350722612805e-01;
amp[13] = 1.9629994862981364e+00; shift[13] = 5.8482592504364534e+00;
amp[14] = 1.6341532465165258e+01; shift[14] = 7.2005096178387191e+01;


/*
SMALLCUT=1.0e-20;
LARGECUT=10000.0;
//REMEZ_ERR=0.0001;

ampdeg = 
0.02949973484365204;
amp[0] = 
4.41645342253794614e-16 ;
amp[1] = 
1.85624953464793254e-15 ;
amp[2] = 
8.14737203018511438e-15 ;
amp[3] = 
3.62274500855480014e-14 ;
amp[4] = 
1.61393073788339243e-13 ;
amp[5] = 
7.19193682937031455e-13 ;
amp[6] = 
3.20495827697060766e-12 ;
amp[7] = 
1.42823942458525721e-11 ;
amp[8] = 
6.36472940138951111e-11 ;
amp[9] = 
2.83634406866186053e-10 ;
amp[10] = 
1.26397326940250981e-9 ;
amp[11] = 
5.63270325179164956e-9 ;
amp[12] = 
2.51012796323396426e-8 ;
amp[13] = 
1.11860012580976909e-7 ;
amp[14] = 
4.98487054676166648e-7 ;
amp[15] = 
2.221431538271552553e-6 ;
amp[16] = 
9.899471807651637073e-6 ;
amp[17] = 
0.0000441154962813289244963956;
amp[18] = 
0.0001965940580292617202499434;
amp[19] = 
0.0008760919491897339503945790;
amp[20] = 
0.003904173222362148509593822;
amp[21] = 
0.017398369666307777074453024;
amp[22] = 
0.077533290073260133641421184;
amp[23] = 
0.345516696743383802203188068;
amp[24] = 
1.539780148063357372038506982;
amp[25] = 
6.863004004257667876053465140;
amp[26] = 
30.62347476463445643787057391;
amp[27] = 
137.7695935681200465871061226;
amp[28] = 
658.366947335869859006266594;
amp[29] = 
4990.2021917135008448369598;
shift[0] = 
4.65673537938231904123e-21 ;
shift[1] = 
6.00890856056099458024e-20 ;
shift[2] = 
4.71070960031520119189e-19 ;
shift[3] = 
3.48557864141549193497e-18 ;
shift[4] = 
2.55922488819241831322e-17 ;
shift[5] = 
1.87709285670278084671e-16 ;
shift[6] = 
1.37657814528735998909e-15 ;
shift[7] = 
1.00950274491500896041e-14 ;
shift[8] = 
7.40308921016910097793e-14 ;
shift[9] = 
5.42898080025904334055e-13 ;
shift[10] = 
3.98128814056623761332e-12 ;
shift[11] = 
2.91963738865499199507e-11 ;
shift[12] = 
2.14108658384942435100e-10 ;
shift[13] = 
1.57014426035173375973e-9 ;
shift[14] = 
1.15144951444345080327e-8 ;
shift[15] = 
8.44403987434412710363e-8 ;
shift[16] = 
6.19235282803049538998e-7 ;
shift[17] = 
4.54110112865439639267e-6 ;
shift[18] = 
0.0000333017254358651660557 ;
shift[19] = 
0.0002442150359542304064732;
shift[20] = 
0.0017909282005461221212364;
shift[21] = 
0.0131336084504906552852354;
shift[22] = 
0.0963141531451455842381155;
shift[23] = 
0.7063124159068471028204004;
shift[24] = 
5.1797474996326180967669076;
shift[25] = 
37.988999609906639069158555;
shift[26] = 
278.79432625428894475564641;
shift[27] = 
2055.6339134386151116623932;
shift[28] = 
15693.580977152735475015593;
shift[29] = 
158586.45560387685128227920;
*/

cout << "min and max eigenvalue are " << SMALLCUT << "\t" << LARGECUT << "\n";
cout << "relative error is 4e-04 in (15,15) approx\n";

epsilon[0][1][2]=1;
epsilon[0][2][1]=-1;
epsilon[1][2][0]=1;
epsilon[2][1][0]=-1;
epsilon[2][0][1]=1;
epsilon[1][0][2]=-1;

Gamma_Matrices();

return;
}

